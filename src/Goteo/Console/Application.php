<?php
/*
 * This file is part of the Goteo Package.
 *
 * (c) Platoniq y FundaciÃ³n Goteo <fundacion@goteo.org>
 *
 * For the full copyright and license information, please view the README.md
 * and LICENSE files that was distributed with this source code.
 */

namespace Goteo\Console;

use Symfony\Component\Console\Application as ConsoleApplication;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\EventDispatcher\Event;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\DependencyInjection\Reference;

use Monolog\Logger;
use Monolog\Handler\StreamHandler;

use Goteo\Application\App;
use Goteo\Application\Config;
use Goteo\Util\Monolog\Handler\MailHandler;

class Application
{
    static protected $_console;
    static protected $_dispatcher;

    /**
     * Creates a new instance of the App ready to run
     * Next calls to this method will return the current instantatied App
     * @return App object
     */
    static public function get() {
        if( ! self::$_console ) {

            // Old constants compatibility generated by the dispatcher
            define('HTTPS_ON', Config::get('ssl') ? true : false); // para las url de project/media
            $url = Config::get('url.main');
            define('SITE_URL', (Config::get('ssl') ? 'https://' : 'http://') . preg_replace('|^(https?:)?//|i','',$url));
            define('SEC_URL', SITE_URL);

            // Add a log level debug to stderr in the App general log
            App::getService('logger')->pushHandler(new StreamHandler('php://stderr', Logger::DEBUG));

            // // And removes the default mail sending
            // foreach(['logger', 'paylogger'] as $name) {
            //     $logger = App::getService($name);
            //     $handlers = $logger->getHandlers();
            //     foreach($handlers as $i => $handler) {
            //         if($handler instanceOf MailHandler) unset($handlers[$i]);
            //     }
            //     $handlers[] = new StreamHandler('php://stderr', Logger::DEBUG);
            //     $logger->setHandlers($handlers);
            // }

            // Add Exception listener

            self::$_console = new ConsoleApplication();
            self::getDispatcher()->addSubscriber(new \Goteo\Console\EventListener\ConsoleExceptionListener());
        }

        return self::$_console;
    }

    static public function getDispatcher() {
        if( ! self::$_dispatcher ) {
            self::setDispatcher(new EventDispatcher());
        }

        return self::$_dispatcher;
    }

    static public function setDispatcher(EventDispatcher $dispatcher) {
        self::$_dispatcher = $dispatcher;
        self::get()->setDispatcher($dispatcher);
    }

    static public function add(Command $command) {
        return self::get()->add($command);
    }

    /**
     * Dispatchs an event
     * Events can be handled by any suscriber
     * @param  string     $eventName event ID
     * @param  Event|null $event     Event object
     * @return Event                 the result object
     */
    static public function dispatch($eventName, Event $event = null) {
        return self::getDispatcher()->dispatch($eventName, $event);
    }

    /**
     * Enables debug mode witch does:
     *     - *.yml settings always read
     *     - A bottom html profiler tool will be displayed on the bottom of the page
     *     - SQL queries will be collected fo statistics
     *     - Html/php error will be shown
     * @param  boolean $enable If must or no be enabled (do it before call App::get())
     *                         A null value does nothing
     * @return boolean         Returns the current debug mode
     */
    static public function debug($enable = null) {
        return App::debug($enable);
    }

}
